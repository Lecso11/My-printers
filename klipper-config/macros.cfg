#####################################################################
#	Start, end, pause, resume, cancel macros
#####################################################################


[gcode_macro PRINT_START]
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    G90
    STATUS_HEATING
    M117 Heating bed
    M140 S{bedtemp}
    M104 S{hotendtemp-40}
    M105
    M190 S{bedtemp}                                                                ; set & wait for bed temp
    M117 Bed heated
    M204 S{printer.configfile.settings.printer.max_accel}                          ; reset base acceleration
    {% if printer.toolhead.homed_axes != 'xyz' %}                                  ; IF homes aren't already homed, home them
		G28			                                                               
	{% endif %}
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE                                                             ; turn off for TPU     
    CLEAN_NOZZLE PURGE=0
    M117 Z-home
    G28 Z
    CALIBRATE_Z
    G0  X230 Y245 F20000                                                           ; park toolhead at rear
    STATUS_HEATING
    M117 Heating hotend
    M104 S{hotendtemp}
    M105
    M109 S{hotendtemp}                                                             ; set & wait for hotend temp
    M117 Heating done
    CLEAN_NOZZLE PURGE=1                                                           ; turn off purge for TPU
    SET_FAN_SPEED FAN=exhaust SPEED=0.3                                            ; turn on exhaust fans
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                            ; turn off filament sensor for leaving time filament to tighten in PTFE tube
    UPDATE_DELAYED_GCODE ID=ENABLEFILAMENTSENSOR DURATION=20                       ; turn on filament sensor after 20 seconds
    STATUS_PRINTING
    M117

[gcode_macro PRINT_END]
gcode:
    M400                                                       ; wait for buffer to clear
    G92 E0                                                     ; zero the extruder
    G1 E-1.0 F3600                                             ; retract filament
    G91                                                        ; relative positioning
    G0 X2     F10000                                           ; move nozzle to remove stringing

    {% if printer.toolhead.position.z >= 10 %}
      G0 Z2.00  F10000                                           ; z hop
    {% else %}
      G0 Z20.00  F5000
    {% endif %}
    
    TURN_OFF_HEATERS
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0        ; turn off filament sensor
    M107                                                       ; turn off fan               
    G90                                                        ; absolute positioning
    M204 S{printer.configfile.settings.printer.max_accel}      ; reset base acceleration
    G0  X230 Y250 F20000                                       ; park toolhead at rear
    G92 E0                                                     ; zero the extruder
    G1 E-9.0 F3600                                             ; retract for cold filament removal
    G92 E0                                                     ; zero the extruder  
    SET_FAN_SPEED FAN=exhaust SPEED=0                          ; turn off exhaust fans
    SET_GCODE_OFFSET Z=0 MOVE=1
    STATUS_READY
    M117
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}    ; set idle timeout to default

[virtual_sdcard]
path: /home/pi/gcode_files

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set idle timeout to default
    RESETRGB                                                                    ; resetting display colors
    TURN_OFF_HEATERS
    M204 S{printer.configfile.settings.printer.max_accel}                       ; reset base acceleration
    M107
    CANCEL_PRINT_BASE
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                         ; turn off filament sensor
    SET_FAN_SPEED FAN=exhaust SPEED=0                                           ; turn off exhaust fans
    STATUS_READY
    G90

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}									           ; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}							   ; set z hop variable for reference in resume macro
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}  ; set hotend temp variable for reference in resume macro
	SET_FAN_SPEED FAN=exhaust SPEED=0						                           ; turn off exhaust fans
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0								   ; disable filament sensor		
	SAVE_GCODE_STATE NAME=PAUSE						
	BASE_PAUSE																	       ; pause print
	G91																				   ; relative positioning
	G1 Z{z} F900																	   ; raise Z up by z hop amount
	G90																				   ; absolute positioning
	G1 XG0 X230 YG0 Y{printer.toolhead.axis_maximum.y-5} F19500						   ; park toolhead above bucket
	M104 S0																			   ; turn off hotend
	SET_IDLE_TIMEOUT TIMEOUT=43200													   ; set timeout to 12 hours
	{% endif %}
    
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    M117
	# Parameters
	{% set e = params.E|default(2.5)|int %}																				; nozzle prime amount
	
    RESETRGB																											; reset LCD color
    M109 S{etemp|int}																									; wait for hotend to heat back up
    G91																													; relative positioning
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
		G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
	{% else %}						
		G1 Z{zhop * -1} F900																							; lower Z back down	without priming
	{% endif %}								
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
    UPDATE_DELAYED_GCODE ID=ENABLEFILAMENTSENSOR DURATION=20                                                            ; turn on filament sensor after 20 seconds
    SET_FAN_SPEED FAN=exhaust SPEED=0.3                                                                                 ; turn on exhaust fans
    BASE_RESUME
    STATUS_PRINTING					

#####################################################################
#	Gcode macros
#####################################################################

[gcode_macro DISPLAY_LAYER_INFO]
gcode:
    {% set current_layer = params.LAYER|int %}
    {% set total_layer = params.TOTAL|int %}
    #{% set remaining_time = params.R|int %}
    M117
    M117 L{current_layer}/{total_layer}#,  { "%02d:%02d" % (remaining_time // 60, remaining_time % 60) } remaining


#[gcode_macro M73]
#rename_existing: M990073
#variable_R: 0
#variable_P: 0
#default_parameter_P: 0
#default_parameter_R: 0
#gcode:
#SET_GCODE_VARIABLE MACRO=M73 VARIABLE=R TYPE=int VALUE={params.R}
#SET_GCODE_VARIABLE MACRO=M73 VARIABLE=P TYPE=int VALUE={params.P}
#M990073 P{params.P|int}
#M117 { "%02d:%02d" % (params.R|int // 60, (params.R|int) % 60) } remaining

[gcode_macro STEPPERS_OFF]
gcode:
      M84

[delayed_gcode DISABLEFILAMENTSENSOR] 
initial_duration: 1
gcode:
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[delayed_gcode ENABLEFILAMENTSENSOR]
gcode:
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1

[gcode_macro M600]
gcode:
      PAUSE

[gcode_macro M900]
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M117 Unloading filament
    M109 S230
    M83
    G1 E-30 F3000
    G92 E0
    TURN_OFF_HEATERS
    M117


[gcode_macro HEATSOAK]
gcode:
    {% set heatsoaktemp = params.TEMP|default(110)|int %}
    
    M140 S{heatsoaktemp}                   ; heat bed
    SET_IDLE_TIMEOUT TIMEOUT=7200          ; set idle timeout to 2h

[gcode_macro ACCESS_TOOLHEAD]
# Bring toolhead to front of chamber for maintenance access
variable_speed: 5000
gcode:
    # Get max positions
    {% set xM = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set zM = printer.configfile.config["stepper_z"]["position_max"]|float %}

    SAVE_GCODE_STATE NAME=ACCESS_TOOLHEAD_state

    G90 # Absolute position
    G0 X{xM/2} Z{zM/3} F{speed}
    G1 Y0 F{speed} # Doing Y second looks cool

    RESTORE_GCODE_STATE NAME=ACCESS_TOOLHEAD_state


[gcode_macro PARK_TO_BACK]
#Park the toolhead to the back middle
gcode:
    G0 X125 Y245 Z30 F5000

[gcode_macro PARK_TO_TOP]
#Park the toolhead to the back middle
gcode:
    G0 X125 Y245 Z200 F5000


[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

#####################################################################
#	LED Macros
#####################################################################

[gcode_macro _LED_VARIABLES]
variable_state: 0
gcode:

[gcode_macro SET_STATE_READY]
gcode:
    SET_GCODE_VARIABLE MACRO=_LED_VARIABLES VARIABLE=state VALUE=1

[gcode_macro SET_STATE_IDLE]
gcode:
    SET_GCODE_VARIABLE MACRO=_LED_VARIABLES VARIABLE=state VALUE=0

[delayed_gcode DELAYED_STATUS_OFF]
initial_duration: 1
gcode:
      STATUS_OFF

#Default LCD RGB
[gcode_macro RESETRGB]
gcode:
      SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.5 BLUE=1 INDEX=1 TRANSMIT=0
      SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.5 BLUE=1 INDEX=2 TRANSMIT=0
      SET_LED LED=fysetc_mini12864 RED=0 GREEN=0.5 BLUE=1 INDEX=3

#Example LCDRGB R=1 G=0 B=0
[gcode_macro LCDRGB]
gcode:
      {% set R = params.R|default(1)|int %}
      {% set G = params.G|default(1)|int %}
      {% set B = params.B|default(1)|int %}

      SET_LED LED=fysetc_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=1 TRANSMIT=0
      SET_LED LED=fysetc_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=2 TRANSMIT=0
      SET_LED LED=fysetc_mini12864 RED={R} GREEN={G} BLUE={B} INDEX=3

#Default logo RGB
[gcode_macro LOGORESET]
gcode:
      SET_PIN PIN=_logo_red VALUE=12
      SET_PIN PIN=_logo_green VALUE=50
      SET_PIN PIN=_logo_blue VALUE=240

#Custom logo RGB 
#Example LOGORGB R=12 G=50 B=240
[gcode_macro LOGORGB]
gcode:
      {% set R = params.R|default(1)|int %}
      {% set G = params.G|default(1)|int %}
      {% set B = params.B|default(1)|int %}

      SET_PIN PIN=_logo_red value={R}
      SET_PIN PIN=_logo_green value={G}
      SET_PIN PIN=_logo_blue value={B}


[gcode_macro LOGO_OFF]
gcode:
      LOGORGB R=0 G=0 B=0


[gcode_macro LIGHTS_OFF]
gcode:
      LOGO_OFF
      SET_PIN PIN=caselight VALUE=0
      SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
      SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
      SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3

[gcode_macro LIGHTS_ON]
gcode:
      LOGORESET
      RESETRGB
      SET_PIN PIN=caselight VALUE=0.25
      STATUS_IDLE

#####################################################################
#	Logic macros
#####################################################################

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}


[respond]
[gcode_macro Hello]
gcode:
    
    M118 Greetings!
    M117 Greetings!

[gcode_macro Love]
gcode:
    M117 love u
    M118 love u
